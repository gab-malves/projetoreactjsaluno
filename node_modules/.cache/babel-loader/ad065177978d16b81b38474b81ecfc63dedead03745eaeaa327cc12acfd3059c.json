{"ast":null,"code":"var _jsxFileName = \"/workspaces/projetoreactjsaluno/src/Componentes/JogoCacaPalavrasParte03/JogoCacaPalavrasPrincipal.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { palavrasLista } from \"./Util/Word\";\nimport { TelaInicialProjeto } from './TelaInicialProjeto';\nimport { TelaJogando } from './TelaJogando';\nimport { TelaFimdeJogo } from './TelaFimdeJogo';\nimport \"./JogoCacaPalavrasPrincipal.css\";\n\n// Etapa 02 - Implementar a lógica do jogo\nimport { useCallback } from 'react';\n\n// Estágios do jogo\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst estagios = [{\n  id: 1,\n  nome: \"Início\"\n},\n// 0\n{\n  id: 2,\n  nome: \"Jogando\"\n},\n// 1\n{\n  id: 3,\n  nome: \"Fimjogo\"\n}]; // 2\n\nconst JogoCacaPalavrasPrincipal = () => {\n  _s();\n  const [estagioJogo, setEstagiodoJogo] = useState(estagios[0].nome); // Posção 0 = Início\n  const [palavrasJogo] = useState(palavrasLista);\n  const [obterPalavraDoJogo, setObterPalavraDoJogo] = useState(\"\");\n  const [obterCategoriaDoJogo, setObterCategoriaDoJogo] = useState(\"\");\n  const [letrasDoJogo, setLetrasDoJogo] = useState([]);\n\n  // Variáveis que vão alterar durante o jogo\n  // vão transitar com a TelaJogando.js\n  const [letrasAdivinhadasVetor, setLetrasAdivinhadasVetor] = useState([]);\n  const [letrasErradasVetor, setLetrasErradasVetor] = useState([]);\n  const [tentativas, setTentativas] = useState(3);\n  const [pontuacao, setPontuacao] = useState(10);\n\n  // Etapa 03 - Hook useEffect para monitorar as tentativas\n  useEffect(() => {\n    if (tentativas <= 0) {\n      console.log(\"Reinicializar variaveis do jogo e ir para o fim do jogo\");\n      // Zerar os vetores das letras para uma nova partida\n      reiniciarvariaveisJogo();\n      // envia para o fim do jogo\n      setEstagiodoJogo(estagios[2].nome);\n    }\n  }, [tentativas]);\n  const reiniciarvariaveisJogo = () => {\n    console.log(\"Reiniciando vetores e as variaveis do jogo\");\n    setLetrasAdivinhadasVetor([]);\n    setLetrasErradasVetor([]);\n  };\n\n  //console.log(\"Palavras do Jogo: \",palavrasJogo)\n\n  // Etapa 02 - Função para carregar a palavra e categoria\n  /*\n  Ótima pergunta! A finalidade do useCallback neste ponto é memorizar (ou \"cachear\") a função funcaoCarregarPalavraeCategoria para que ela só seja recriada quando a dependência palavrasJogo mudar.\n  Por que usar useCallback aqui?\n  Evita recriação desnecessária: Sem useCallback, toda vez que o componente renderiza, a função seria criada novamente. Com useCallback, ela só é recriada se palavrasJogo mudar.\n  Performance: Isso pode ser útil se você passar essa função para componentes filhos que dependem de referência estável (por exemplo, em otimizações com React.memo).\n  Consistência: Garante que a função mantém a mesma referência entre renders, a menos que as dependências mudem.\n  Exemplo simplificado\n  Só será recriada se dependencia mudar.\n  No seu código\n  No seu caso, como palavrasJogo é inicializado uma vez e nunca muda, o uso de useCallback não traz muito benefício prático. Mas, se no futuro palavrasJogo pudesse mudar, useCallback garantiria que a função fosse atualizada corretamente.\n  Resumo:\n  useCallback serve para evitar que a função seja recriada em toda renderização, melhorando performance e estabilidade de referência, especialmente ao passar funções para componentes filhos.\n  */\n  const funcaoCarregarPalavraeCategoria = useCallback(() => {\n    const listaCategorias = Object.keys(palavrasJogo);\n    // Para arredondar para baixo -> Math.floor\n    const categoria = listaCategorias[Math.floor(Math.random() * Object.keys(listaCategorias).length)];\n    const palavraLocal = palavrasJogo[categoria][Math.floor(Math.random() * palavrasJogo[categoria].length)];\n    // return usando {} - retorna um objeto, \n    // return usando [] retornaria um array.\n    return {\n      categoria,\n      palavraLocal\n    };\n  }, [palavrasJogo]); // Função acionada sempre que o valor desa variável alterar/mudar\n\n  // Etapa 03 - Adicionar useCallback para a função iniciar jogo\n  // A função funcaoIniciarJogo é passada como prop para o componente TelaInicialProjeto.js\n  // Quando o botão iniciar jogo for clicado, a função será executada\n  // A função carrega a palavra e categoria, atualiza as variáveis de estado e muda o estágio do jogo para \"Jogando\"\n  // Antes estava assim:\n  /*\n  const funcaoIniciarJogo = () => {\n    console.log(\"Iniciar Jogo\");\n    setEstagiodoJogo (estagios[1].nome)\n  } */\n  // Agora está assim:\n  const funcaoIniciarJogo = useCallback(() => {\n    console.log(\"Iniciar Jogo\");\n    console.log(\"Iniciar Jogo\");\n    console.log(\"Iniciar Jogo\");\n    // etapa 02 - Carregar palavra e categoria\n    // obter palavra e categoria. Devem ter o mesmo nome utilizado no return.\n    // Aqui as variáveis são locais. Precisamos passar para a s variáveis \n    // de estado para que possam ser utilizadas na TelaJogando.js\n    // A variável palavraLocal será dividida em letras e armazenada na variável de estado letrasDoJogo\n    // A variável categoria será armazenada na variável de estado obterCategoriaDoJogo\n    const {\n      categoria,\n      palavraLocal\n    } = funcaoCarregarPalavraeCategoria();\n    console.log(`Variaveis Locais: Categoria: ${categoria} Palavra: ${palavraLocal}`);\n\n    // Etapa 03 - Caminho para termos os quadrados na tela\n    // Colocar a categoria na variável de estado global\n    setObterCategoriaDoJogo(categoria);\n    // Colocar as letras da palavra na variável de estado\n    setObterPalavraDoJogo(palavraLocal);\n    let vetordaPalavra = palavraLocal.split(\"\");\n    // Dividir a palavra e converter em letras minusculas\n    vetordaPalavra = vetordaPalavra.map(letra => letra.toLowerCase());\n    setLetrasDoJogo(vetordaPalavra); // Dividir a palavra em letras\n\n    // Remova o console.log direto após o setState, pois o valor ainda não foi atualizado\n    // Para depurar o valor atualizado, use useEffect.\n\n    // Mudar o estágio do jogo para Jogando\n    setEstagiodoJogo(estagios[1].nome);\n  }, [funcaoCarregarPalavraeCategoria]);\n  // Etapa 02 - Função para processar a letra digitada\n  // Antes estava assim:\n  /*\n  const processarLetraJogoFunc = (letraDigitada) =>{\n    setEstagiodoJogo (estagios[2].nome)\n  }*/\n  // Agora está assim:\n  // Etapa 03 - Lógica para verificar a letra\n  // Função para processar a letra digitada\n  // A função processarLetraJogoFunc é passada como prop para o componente TelaJogando.js\n  // A letra digitada é recebida como argumento letraDigitada\n  // A letra digitada é convertida para minúscula para facilitar a comparação\n  // Verificamos se a letra já foi adivinhada ou errada, se sim, retornamos sem fazer nada\n  // Se a letra estiver na palavra do jogo, adicionamos à lista de letras adivinhadas e aumentamos a pontuação\n  // Se a letra não estiver na palavra, adicionamos à lista de letras erradas e diminuímos as tentativas\n  // Se as tentativas chegarem a zero, mudamos o estágio do jogo para \"Fimjogo\"\n  const processarLetraJogoFunc = letraDigitada => {\n    console.log(\"Letra digitada em TelaJogador.js: \", letraDigitada.toLowerCase);\n    if (letraDigitada && letraDigitada.length > 0) {\n      const letraDigitadaNormalizada = letraDigitada && letraDigitada.length > 0 && letraDigitada.toLowerCase();\n      // Verificar se a letra já foi utilizada\n      if (letrasAdivinhadasVetor.includes(letraDigitadaNormalizada) || letrasErradasVetor.includes(letraDigitadaNormalizada)) {\n        // da uma chance ao usuário não fazendo nada deixando ele continuar sem perder chances\n        return;\n      }\n      // Se você acertou a letra em acordo com a palavra.\n      // incluirá no vetor de letras adivinhadas\n      // Se acertar a letra ganha 5 pontos\n      // Se errar a letra perde 1 tentativa\n      if (letrasDoJogo.includes(letraDigitadaNormalizada)) {\n        setLetrasAdivinhadasVetor(valorAtual => [...valorAtual, letraDigitadaNormalizada]);\n        setPontuacao(ponto => ponto + 5);\n      } else {\n        // Quando erra reduzimos a tentativa em uma unidade\n        /*\n        Used 1 reference\n        O trecho ...valorAtual utiliza o operador spread (...) em JavaScript.\n        O que é o operador spread?\n        O operador spread (...) é usado para \"espalhar\" os elementos de um objeto iterável (como arrays ou objetos) em outro local.\n        Ele é muito comum em React para copiar ou combinar objetos/arrays de forma imutável.\n        Como funciona no contexto de objetos?\n        Se valorAtual for um objeto, ...valorAtual copia todas as propriedades desse objeto para outro objeto. Exemplo:\n        const valorAtual = { a: 1, b: 2 };\n        const novoObjeto = { ...valorAtual, c: 3 };// novoObjeto agora é { a: 1, b: 2, c: 3 }\n        Por que usar isso em React?\n        No React, é comum atualizar o estado de forma imutável. O spread ajuda a criar uma nova cópia do estado antigo, adicionando ou modificando propriedades sem alterar o original.\n        Possíveis gotchas\n        O spread faz uma cópia superficial (shallow copy). Objetos aninhados ainda são referenciados.\n        Se houver propriedades duplicadas, a última sobrescreve as anteriores.\n        Resumindo\n        O uso de ...valorAtual serve para copiar todas as propriedades de valorAtual para outro objeto, facilitando a atualização de estados ou a combinação de objetos de forma limpa e imutável.\n         */\n        setLetrasErradasVetor(valorAtual => [...valorAtual, letraDigitadaNormalizada]);\n        setTentativas(ten => ten - 1);\n      }\n    } else {\n      setEstagiodoJogo(estagios[2].nome);\n    }\n  };\n  const funcaoVoltarInicioJogo = () => {\n    console.log(\"Voltar para o início do jogo - funcaoVoltarInicioJogo\");\n    // Etapa 03 - Antes de realmente reiniciar o jogo, vamos recolocar os valores iniciais nas variáveis.\n    setTentativas(15);\n    setPontuacao(0);\n    // Etapa 01 - Voltar para o início do jogo\n    setEstagiodoJogo(estagios[0].nome);\n  };\n\n  // Use useEffect para ver o valor atualizado de obterCategoriaDoJogo\n  React.useEffect(() => {\n    console.log(`Valor atualizado de obterCategoriaDoJogo: ${obterCategoriaDoJogo}`);\n    console.log(`Valor atualizado de obterPalavraDoJogo: ${obterPalavraDoJogo}`);\n    // Se quiser ver as letras do jogo também\n    console.log(`Letras do Jogo: ${letrasDoJogo}`);\n  }, [obterCategoriaDoJogo, obterPalavraDoJogo, letrasDoJogo]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"jogo-caca-palavras-container\",\n    children: [\"return (\", estagioJogo === \"Início\" && /*#__PURE__*/_jsxDEV(TelaInicialProjeto, {\n      iniciarJogo: funcaoIniciarJogo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 38\n    }, this), estagioJogo === \"Jogando\" && /*#__PURE__*/_jsxDEV(TelaJogando, {\n      processarLetraJogoFunc: processarLetraJogoFunc,\n      pontuacao: pontuacao,\n      obterCategoriaDoJogo: obterCategoriaDoJogo,\n      tentativas: tentativas,\n      letrasAdivinhadasVetor: letrasAdivinhadasVetor,\n      letrasDoJogo: letrasDoJogo,\n      letrasErradasVetor: letrasErradasVetor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 39\n    }, this), estagioJogo === \"Fimjogo\" && /*#__PURE__*/_jsxDEV(TelaFimdeJogo, {\n      voltarInicio: funcaoVoltarInicioJogo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 39\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n};\n_s(JogoCacaPalavrasPrincipal, \"hSkr4otF4VJZbNS8BgVHcNQ1/fg=\");\n_c = JogoCacaPalavrasPrincipal;\nexport default JogoCacaPalavrasPrincipal;\nvar _c;\n$RefreshReg$(_c, \"JogoCacaPalavrasPrincipal\");","map":{"version":3,"names":["React","useEffect","useState","palavrasLista","TelaInicialProjeto","TelaJogando","TelaFimdeJogo","useCallback","jsxDEV","_jsxDEV","estagios","id","nome","JogoCacaPalavrasPrincipal","_s","estagioJogo","setEstagiodoJogo","palavrasJogo","obterPalavraDoJogo","setObterPalavraDoJogo","obterCategoriaDoJogo","setObterCategoriaDoJogo","letrasDoJogo","setLetrasDoJogo","letrasAdivinhadasVetor","setLetrasAdivinhadasVetor","letrasErradasVetor","setLetrasErradasVetor","tentativas","setTentativas","pontuacao","setPontuacao","console","log","reiniciarvariaveisJogo","funcaoCarregarPalavraeCategoria","listaCategorias","Object","keys","categoria","Math","floor","random","length","palavraLocal","funcaoIniciarJogo","vetordaPalavra","split","map","letra","toLowerCase","processarLetraJogoFunc","letraDigitada","letraDigitadaNormalizada","includes","valorAtual","ponto","ten","funcaoVoltarInicioJogo","className","children","iniciarJogo","fileName","_jsxFileName","lineNumber","columnNumber","voltarInicio","_c","$RefreshReg$"],"sources":["/workspaces/projetoreactjsaluno/src/Componentes/JogoCacaPalavrasParte03/JogoCacaPalavrasPrincipal.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {palavrasLista} from \"./Util/Word\"\nimport { TelaInicialProjeto } from './TelaInicialProjeto'\nimport { TelaJogando } from './TelaJogando'\nimport { TelaFimdeJogo } from './TelaFimdeJogo'\nimport \"./JogoCacaPalavrasPrincipal.css\"\n\n// Etapa 02 - Implementar a lógica do jogo\nimport { useCallback } from 'react'\n\n  // Estágios do jogo\n  const estagios = [\n  {id:1,nome: \"Início\"}, // 0\n  {id:2,nome: \"Jogando\"}, // 1\n  {id:3,nome: \"Fimjogo\"} ] // 2\n\nconst JogoCacaPalavrasPrincipal = () => {\n\n  const [estagioJogo,setEstagiodoJogo] = useState (estagios[0].nome) // Posção 0 = Início\n  const [palavrasJogo] = useState (palavrasLista)\n  \n  const [obterPalavraDoJogo,setObterPalavraDoJogo] = useState(\"\");\n  const [obterCategoriaDoJogo,setObterCategoriaDoJogo] = useState(\"\");\n  const [letrasDoJogo,setLetrasDoJogo] = useState([]);\n\n  // Variáveis que vão alterar durante o jogo\n  // vão transitar com a TelaJogando.js\n  const [letrasAdivinhadasVetor,setLetrasAdivinhadasVetor] = useState([])\n  const [letrasErradasVetor,setLetrasErradasVetor] = useState([])\n  const [tentativas,setTentativas] = useState(3)\n  const [pontuacao,setPontuacao] = useState(10)\n\n  // Etapa 03 - Hook useEffect para monitorar as tentativas\n  useEffect (() => {\n    if (tentativas <= 0 ){\n      console.log(\"Reinicializar variaveis do jogo e ir para o fim do jogo\")\n      // Zerar os vetores das letras para uma nova partida\n      reiniciarvariaveisJogo ()\n      // envia para o fim do jogo\n      setEstagiodoJogo (estagios[2].nome)\n    }\n  }, [tentativas])\n\n  const  reiniciarvariaveisJogo = () => {\n    console.log(\"Reiniciando vetores e as variaveis do jogo\")\n    setLetrasAdivinhadasVetor ([])\n    setLetrasErradasVetor ([])\n  }\n\n  //console.log(\"Palavras do Jogo: \",palavrasJogo)\n\n// Etapa 02 - Função para carregar a palavra e categoria\n  /*\nÓtima pergunta! A finalidade do useCallback neste ponto é memorizar (ou \"cachear\") a função funcaoCarregarPalavraeCategoria para que ela só seja recriada quando a dependência palavrasJogo mudar.\n\nPor que usar useCallback aqui?\nEvita recriação desnecessária: Sem useCallback, toda vez que o componente renderiza, a função seria criada novamente. Com useCallback, ela só é recriada se palavrasJogo mudar.\nPerformance: Isso pode ser útil se você passar essa função para componentes filhos que dependem de referência estável (por exemplo, em otimizações com React.memo).\nConsistência: Garante que a função mantém a mesma referência entre renders, a menos que as dependências mudem.\nExemplo simplificado\nSó será recriada se dependencia mudar.\nNo seu código\nNo seu caso, como palavrasJogo é inicializado uma vez e nunca muda, o uso de useCallback não traz muito benefício prático. Mas, se no futuro palavrasJogo pudesse mudar, useCallback garantiria que a função fosse atualizada corretamente.\n\nResumo:\nuseCallback serve para evitar que a função seja recriada em toda renderização, melhorando performance e estabilidade de referência, especialmente ao passar funções para componentes filhos.\n  */\n const funcaoCarregarPalavraeCategoria = useCallback (() =>{\n    const listaCategorias = Object.keys(palavrasJogo)\n    // Para arredondar para baixo -> Math.floor\n    const categoria = listaCategorias[Math.floor(Math.random() * Object.keys(listaCategorias).length)]\n    const palavraLocal = palavrasJogo[categoria][Math.floor(Math.random() * palavrasJogo[categoria].length)]\n    // return usando {} - retorna um objeto, \n    // return usando [] retornaria um array.\n    return {categoria,palavraLocal};\n  }, [palavrasJogo] ); // Função acionada sempre que o valor desa variável alterar/mudar\n\n  // Etapa 03 - Adicionar useCallback para a função iniciar jogo\n  // A função funcaoIniciarJogo é passada como prop para o componente TelaInicialProjeto.js\n  // Quando o botão iniciar jogo for clicado, a função será executada\n  // A função carrega a palavra e categoria, atualiza as variáveis de estado e muda o estágio do jogo para \"Jogando\"\n  // Antes estava assim:\n  /*\n  const funcaoIniciarJogo = () => {\n    console.log(\"Iniciar Jogo\");\n    setEstagiodoJogo (estagios[1].nome)\n  } */\n  // Agora está assim:\n  const funcaoIniciarJogo = useCallback (() => {\n    console.log(\"Iniciar Jogo\");\n    console.log(\"Iniciar Jogo\");\n    console.log(\"Iniciar Jogo\");\n    // etapa 02 - Carregar palavra e categoria\n    // obter palavra e categoria. Devem ter o mesmo nome utilizado no return.\n    // Aqui as variáveis são locais. Precisamos passar para a s variáveis \n    // de estado para que possam ser utilizadas na TelaJogando.js\n    // A variável palavraLocal será dividida em letras e armazenada na variável de estado letrasDoJogo\n    // A variável categoria será armazenada na variável de estado obterCategoriaDoJogo\n    const {categoria,palavraLocal} = funcaoCarregarPalavraeCategoria();\n    console.log(`Variaveis Locais: Categoria: ${categoria} Palavra: ${palavraLocal}`)\n\n    // Etapa 03 - Caminho para termos os quadrados na tela\n    // Colocar a categoria na variável de estado global\n    setObterCategoriaDoJogo(categoria)\n    // Colocar as letras da palavra na variável de estado\n    setObterPalavraDoJogo (palavraLocal);\n    \n    let vetordaPalavra = palavraLocal.split(\"\");\n    // Dividir a palavra e converter em letras minusculas\n    vetordaPalavra = vetordaPalavra.map((letra) => letra.toLowerCase());\n    setLetrasDoJogo(vetordaPalavra) // Dividir a palavra em letras\n\n    // Remova o console.log direto após o setState, pois o valor ainda não foi atualizado\n    // Para depurar o valor atualizado, use useEffect.\n\n    // Mudar o estágio do jogo para Jogando\n    setEstagiodoJogo (estagios[1].nome)\n  }, [funcaoCarregarPalavraeCategoria]);\n  // Etapa 02 - Função para processar a letra digitada\n  // Antes estava assim:\n  /*\n  const processarLetraJogoFunc = (letraDigitada) =>{\n    setEstagiodoJogo (estagios[2].nome)\n  }*/\n  // Agora está assim:\n  // Etapa 03 - Lógica para verificar a letra\n  // Função para processar a letra digitada\n  // A função processarLetraJogoFunc é passada como prop para o componente TelaJogando.js\n  // A letra digitada é recebida como argumento letraDigitada\n  // A letra digitada é convertida para minúscula para facilitar a comparação\n  // Verificamos se a letra já foi adivinhada ou errada, se sim, retornamos sem fazer nada\n  // Se a letra estiver na palavra do jogo, adicionamos à lista de letras adivinhadas e aumentamos a pontuação\n  // Se a letra não estiver na palavra, adicionamos à lista de letras erradas e diminuímos as tentativas\n  // Se as tentativas chegarem a zero, mudamos o estágio do jogo para \"Fimjogo\"\n  const processarLetraJogoFunc = (letraDigitada) =>{\n    console.log(\"Letra digitada em TelaJogador.js: \",letraDigitada.toLowerCase)\n    if (letraDigitada && letraDigitada.length > 0 ){\n      const letraDigitadaNormalizada =  letraDigitada && letraDigitada.length > 0 &&letraDigitada.toLowerCase();\n      // Verificar se a letra já foi utilizada\n      if (letrasAdivinhadasVetor.includes(letraDigitadaNormalizada) || \n          letrasErradasVetor.includes(letraDigitadaNormalizada)){\n        // da uma chance ao usuário não fazendo nada deixando ele continuar sem perder chances\n        return;\n      }\n      // Se você acertou a letra em acordo com a palavra.\n      // incluirá no vetor de letras adivinhadas\n      // Se acertar a letra ganha 5 pontos\n      // Se errar a letra perde 1 tentativa\n      if (letrasDoJogo.includes(letraDigitadaNormalizada) ){\n        setLetrasAdivinhadasVetor((valorAtual) => [...valorAtual,letraDigitadaNormalizada])\n        setPontuacao ((ponto) => ponto + 5)\n      }\n      else {\n        // Quando erra reduzimos a tentativa em uma unidade\n        /*\nUsed 1 reference\nO trecho ...valorAtual utiliza o operador spread (...) em JavaScript.\n\nO que é o operador spread?\nO operador spread (...) é usado para \"espalhar\" os elementos de um objeto iterável (como arrays ou objetos) em outro local.\nEle é muito comum em React para copiar ou combinar objetos/arrays de forma imutável.\n\nComo funciona no contexto de objetos?\nSe valorAtual for um objeto, ...valorAtual copia todas as propriedades desse objeto para outro objeto. Exemplo:\n\nconst valorAtual = { a: 1, b: 2 };\nconst novoObjeto = { ...valorAtual, c: 3 };// novoObjeto agora é { a: 1, b: 2, c: 3 }\n\nPor que usar isso em React?\nNo React, é comum atualizar o estado de forma imutável. O spread ajuda a criar uma nova cópia do estado antigo, adicionando ou modificando propriedades sem alterar o original.\n\nPossíveis gotchas\nO spread faz uma cópia superficial (shallow copy). Objetos aninhados ainda são referenciados.\nSe houver propriedades duplicadas, a última sobrescreve as anteriores.\nResumindo\nO uso de ...valorAtual serve para copiar todas as propriedades de valorAtual para outro objeto, facilitando a atualização de estados ou a combinação de objetos de forma limpa e imutável.\n\n        */\n        setLetrasErradasVetor((valorAtual) => [...valorAtual,letraDigitadaNormalizada])\n        setTentativas ((ten) => ten - 1)\n      }\n    }else{\n       setEstagiodoJogo (estagios[2].nome)\n    }\n  }\n  const funcaoVoltarInicioJogo = () => {\n    console.log(\"Voltar para o início do jogo - funcaoVoltarInicioJogo\");\n    // Etapa 03 - Antes de realmente reiniciar o jogo, vamos recolocar os valores iniciais nas variáveis.\n    setTentativas (15)\n    setPontuacao (0)\n    // Etapa 01 - Voltar para o início do jogo\n    setEstagiodoJogo (estagios[0].nome)\n  }\n  \n    // Use useEffect para ver o valor atualizado de obterCategoriaDoJogo\n  React.useEffect(() => {\n    console.log(`Valor atualizado de obterCategoriaDoJogo: ${obterCategoriaDoJogo}`);\n    console.log(`Valor atualizado de obterPalavraDoJogo: ${obterPalavraDoJogo}`);\n    // Se quiser ver as letras do jogo também\n    console.log(`Letras do Jogo: ${letrasDoJogo}`);\n  }, [obterCategoriaDoJogo, obterPalavraDoJogo, letrasDoJogo]);\n\n\n  return (\n    <div className=\"jogo-caca-palavras-container\">\n\n\n  return (\n        {/* Mostrar o estágio do jogo \n        {console.log(\"Dica estagioJogo: \",estagioJogo)} */}\n        {/* Como a posição 0 contem Inicio será apresentado o conteúdo do componente TelaInicial na tela. */}\n        {estagioJogo === \"Início\" && <TelaInicialProjeto iniciarJogo={funcaoIniciarJogo}/>}\n        {/* Antes estava assim:  \n        {estagioJogo === \"Jogando\" && <TelaJogando processarLetraJogo={processarLetraJogoFunc} />} */}\n        {/* Agora está assim:  */}\n        {estagioJogo === \"Jogando\" && <TelaJogando \n          processarLetraJogoFunc={processarLetraJogoFunc}\n          pontuacao = {pontuacao} \n          obterCategoriaDoJogo = {obterCategoriaDoJogo}\n          tentativas = {tentativas}\n          letrasAdivinhadasVetor = {letrasAdivinhadasVetor}\n          letrasDoJogo = {letrasDoJogo}\n          letrasErradasVetor = {letrasErradasVetor}\n      />}\n\n \n\n\n        {estagioJogo === \"Fimjogo\" && <TelaFimdeJogo voltarInicio={funcaoVoltarInicioJogo} />}\n    </div>\n  )\n}\n\nexport default JogoCacaPalavrasPrincipal"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}